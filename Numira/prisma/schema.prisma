// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["wasm"]
  engineType      = "wasm"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Authentication fields
  passwordHash  String?
  salt          String?
  
  // Disclaimer acceptance
  disclaimerAccepted    Boolean  @default(false)
  disclaimerAcceptedAt  DateTime?
  disclaimerVersion     String?
  
  // User data
  journals      Journal[]
  
  @@map("users")
}

model Journal {
  id          String   @id @default(cuid())
  userId      String
  personaId   String
  roomId      String
  prompt      String
  response    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@map("journals")
}

model Persona {
  id           String   @id
  name         String
  tone         String
  voice        String
  description  String
  systemPrompt String
  defaultRooms String   // originally String[], serialize as JSON
  tags         String   // originally String[], serialize as JSON
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("personas")
}

model Room {
  id                String     @id
  name              String
  description       String
  purpose           String
  supportedPersonas String     // originally String[], serialize as JSON
  samplePrompt      String
  tags              String     // originally String[], serialize as JSON
  promptType        PromptType
  features          Json       // JSON object for features
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@map("rooms")
}

model Feedback {
  id        String   @id @default(cuid())
  message   String
  rating    Int      @db.Integer
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User?    @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@map("feedback")
}

enum PromptType {
  open
  guided
  short_form @map("short-form")
  targeted
}
